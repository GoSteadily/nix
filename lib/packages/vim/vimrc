"NOTE: vim-sensible is automatically loaded.


set nocompatible
set path+=**

" tabs as 2 spaces instead of \t characters
set tabstop=2 shiftwidth=2 expandtab
au! BufNewFile,BufRead *.elm set tabstop=4 shiftwidth=4
au! BufNewFile,BufRead *.py set tabstop=4 shiftwidth=4

" always show one line above/below cursor
set incsearch

" enable relative line numbers
set relativenumber
" show the current line's number instead of zero
set number

" highlight the active row
set cursorline

" some language servers have issues with backup files
set nobackup
set nowritebackup

" always show signcolumn
set signcolumn=yes

" hide completion menu short messages
set shortmess+=c

" only hide buffers when leaving them
set hidden

" improve UX
set updatetime=300

" highlight all search results
set incsearch "highlight as i'm searching
set hlsearch "highlights all results

" disable folding
set nofoldenable

" set the colorscheme
colorscheme gruvbox
set background=dark
hi! link CocFloating markdown
hi CocUnderline gui=undercurl term=undercurl
hi CocErrorHighlight ctermfg=red  guifg=#c4384b gui=undercurl term=undercurl
hi CocWarningHighlight ctermfg=yellow guifg=#c4ab39 gui=undercurl term=undercurl

" set auto-completion options
set completeopt=menu,menuone,popup,noselect,noinsert

" leader shortcuts
let mapleader=","
" easier to switch to the last active buffer
nmap <Leader><Leader> :b#<CR>
" toggle line numbers
nmap <Leader>n :set invrelativenumber<CR>
" open NERDTree
nmap <Leader>t :NERDTreeToggle<CR>
" open terminal
nmap <Leader>tt :tab terminal
nmap <Leader>tv :vert terminal
" unhighlight search results
nmap <Leader>h :nohlsearch<CR>
" easily change filestype
nmap <Leader>f :set filetype=
" pretty JSON
nmap <Leader>j :%!jq .<CR>
" quickfix window
nmap <Leader>qo :copen<CR>
nmap <Leader>qc :cclose<CR>
nmap <Leader>qp :cprevious<CR>
nmap <Leader>qn :cnext<CR>
" preview window
nmap <Leader>pc :pclose<CR>
" location list
nmap <Leader>lo :lopen<CR>
nmap <Leader>lc :lclose<CR>
nmap <Leader>lp :lprevious<CR>
nmap <Leader>ln :lnext<CR>

" wildignore / ctrlp ignore rules
set wildignore+=*.so,*.swp,*.zip,*.hi,*.o,*/node_modules/*,*/dist/*,*/.dist/*,*/build/*,*/.build/*,*/Godeps/*,*/elm-stuff/*,*/.gem/*,*/.git/*,*/tmp/*

" Search shortcuts with fzf.vim
map <C-p> :Files<CR>
map <C-\> :Ag<CR>
nmap <Leader>b :Buffers<CR>

" easy-align mapping
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" set up the_silver_searcher with grep
if executable('ag')
  let grepprg = 'ag --vimgrep'
endif

" auto-syntax rules
au! BufNewFile,BufRead *.hdl set filetype=txt
au! BufNewFile,BufRead *.ejs set filetype=html
au! BufNewFile,BufRead *.ledger set filetype=ledger
au! BufNewFile,BufRead *.json,*.js,*.jsx set filetype=javascript
au! BufNewFile,BufRead *.ts,*.tsx set filetype=typescript
au! BufNewFile,BufRead *.dockerfile,*.docker set filetype=dockerfile
au! BufNewFile,BufRead *.mdrn set filetype=lisp

" run ctags on save, if available
autocmd BufWritePost * call system('which ctags &> /dev/null && ctags -R . || exit 0')

" rooter config
let g:rooter_patterns = ['.git', '.git/', 'shell.nix', 'src/']
let g:rooter_silent_chdir = 1

" airline
let g:airline#extensions#branch#enabled = 1

" CoC Configuration (sets up language servers, formatters)
let g:coc_user_config = {
    \ 'diagnostic.messageTarget': 'echo',
    \ 'languageserver': {
      \ 'elmLS': {
        \ 'command': 'elm-language-server',
        \ 'filetypes': ['elm'],
        \ 'rootPatterns': ['elm.json']
      \ },
      \ 'haskell': {
        \ 'command': 'haskell-language-server-wrapper',
        \ 'args': [
          \ '--lsp'
        \ ],
        \ 'rootPatterns': [
          \ 'hie.yaml',
        \ ],
        \ 'filetypes': [
          \ 'haskell',
          \ 'lhaskell',
        \ ]
      \ }
    \}
\ }

" CoC-specific key bindings
nmap <silent><C-k> <Plug>(coc-diagnostic-prev)
nmap <silent><C-j> <Plug>(coc-diagnostic-next)
nmap <leader>ad :call CocAction('diagnosticPreview')<CR>
nmap <leader>ap <Plug>(coc-diagnostic-prev)
nmap <leader>an <Plug>(coc-diagnostic-next)
nmap <leader>ag <Plug>(coc-definition)
nmap <leader>at <Plug>(coc-type-definition)
nmap <leader>ags :call CocAction('jumpDefinition', 'split')<CR>
nmap <leader>agv :call CocAction('jumpDefinition', 'vsplit')<CR>
nmap <leader>agt :call CocAction('jumpDefinition', 'tabe')<CR>
nmap <leader>ar <Plug>(coc-references)

" Show documentation in preview window.
nnoremap <silent> <leader>ah :call <SID>show_documentation()<CR>
function! s:show_documentation()
 if (index(['vim','help'], &filetype) >= 0)
   execute 'h '.expand('<cword>')
 elseif (coc#rpc#ready())
   call CocActionAsync('doHover')
 else
   execute '!' . &keywordprg . " " . expand('<cword>')
 endif
endfunction

" Enable per-project .vimrc files
set exrc

" Ensure per-project .vimrc files are secure
set secure

" Define function to complete various startup tasks
function StartUp()
  " Load local .vimrc file
  if filereadable("./.vimrc")
    source .vimrc
  endif
  if filereadable("./.tmp.vimrc")
    source .tmp.vimrc
  endif
endfunction
" Load local .vimrc file when starting vim
autocmd VimEnter * call StartUp()

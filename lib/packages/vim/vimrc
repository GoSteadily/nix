" load sensible now so it can be overridden as desired
packadd vim-sensible

set nocompatible
syntax enable
set path+=**

" tabs as 2 spaces instead of \t characters
set tabstop=2 shiftwidth=2 expandtab
au! BufNewFile,BufRead *.elm set tabstop=4 shiftwidth=4
au! BufNewFile,BufRead *.py set tabstop=4 shiftwidth=4

" enable line numbers
set relativenumber

" highlight the active row
set cursorline

" some language servers have issues with backup files
set nobackup
set nowritebackup

" always show signcolumn
set signcolumn=yes

" hide completion menu short messages
set shortmess+=c

" only hide buffers when leaving them
set hidden

" improve UX
set updatetime=300

" highlight all search results
set incsearch "highlight as i'm searching
set hlsearch "highlights all results

" set the colorscheme
colorscheme gruvbox
set background=dark

" leader shortcuts
let mapleader=","
" easier to switch to the last active buffer
nmap <Leader><Leader> :b#<CR>
" toggle line numbers
nmap <Leader>l :set invrelativenumber<CR>
" open terminal
nmap <Leader>t :tab terminal
nmap <Leader>tv :vert terminal
" unhighlight search results
nmap <Leader>h :nohlsearch<CR>
" easily change filestype
nmap <Leader>f :set filetype=
" pretty JSON
nmap <Leader>j :%!${pkgs.jq}/bin/jq .<CR>
" quickfix window
nmap <Leader>qo :copen<CR>
nmap <Leader>qc :cclose<CR>
nmap <Leader>qp :cprevious<CR>
nmap <Leader>qn :cnext<CR>
" preview window
nmap <Leader>pc :pclose<CR>
" location list
nmap <Leader>lo :lopen<CR>
nmap <Leader>lc :lclose<CR>
nmap <Leader>lp :lprevious<CR>
nmap <Leader>ln :lnext<CR>

" wildignore / ctrlp ignore rules
"let g:ctrlp_custom_ignore = "\.(git|svg|hg)$"
set wildignore+=*.so,*.swp,*.zip,*.hi,*.o,*/node_modules/*,*/dist/*,*/.dist/*,*/build/*,*/.build/*,*/Godeps/*,*/elm-stuff/*,*/.gem/*,*/.git/*

" NERD tree options
map <C-l> :NERDTreeToggle<CR>

" Search tags with CtrlP
map <C-o> :CtrlPTag<CR>

" easy-align mapping
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" set up the_silver_searcher with grep
if executable('ag')
  let grepprg = 'ag --vimgrep'
endif

" auto-syntax rules
au! BufNewFile,BufRead *.hdl set filetype=txt
au! BufNewFile,BufRead *.ejs set filetype=html
au! BufNewFile,BufRead *.ledger set filetype=ledger
au! BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

" run ctags on save, if available
autocmd BufWritePost * call system('which ctags &> /dev/null && ctags -R . || exit 0')

" rooter config
let g:rooter_patterns = ['.git', '.git/', 'shell.nix', 'src/']

" airline
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#branch#enabled = 1

" Ale auto-fixing
let g:ale_linters = {}
let g:ale_linters['haskell'] = []
let g:ale_linters['typescript'] = ['tslint', 'tsserver']
let g:ale_fixers = {}
let g:ale_fixers['*'] = ['remove_trailing_lines', 'trim_whitespace']
let g:ale_fixers['javascript'] = ['prettier', 'eslint']
let g:ale_fixers['typescript'] = ['tslint', 'prettier', 'eslint']
let g:ale_fixers['haskell'] = ['brittany']
let g:ale_javascript_eslint_use_global = 0
let g:ale_completion_enabled = 1
let g:ale_close_preview_on_insert = 1
let g:ale_lsp_show_message_severity = 'information'
let g:ale_fix_on_save = 1
set omnifunc=ale#completion#OmniFunc
" easily jump between errors
map <silent><C-k> <Plug>(ale_previous_wrap)
map <silent><C-j> <Plug>(ale_next_wrap)
nmap <leader>ap <Plug>(ale_previous_wrap)
nmap <leader>an <Plug>(ale_next_wrap)
nmap <leader>ad :ALEDetail<CR>
vmap <leader>ad :ALEDetail<CR>
nmap <leader>ag :ALEGoToDefinition<CR>
vmap <leader>ag :ALEGoToDefinition<CR>
nmap <leader>agv :ALEGoToDefinitionInVSplit<CR>
vmap <leader>agv :ALEGoToDefinitionInVSplit<CR>
nmap <leader>ar :ALEFindReferences<CR>
vmap <leader>ar :ALEFindReferences<CR>
nmap <leader>ah :ALEHover<CR>
vmap <leader>ah :ALEHover<CR>
nmap <Leader>af :ALEFix<CR>

" Set make program repo-specific make script
if filereadable("./make.sh")
  set makeprg=./make.sh
elseif filereadable("./scripts/make.sh")
  set makeprg=./scripts/make.sh
endif

" Enable per-project .vimrc files
set exrc
" Ensure per-project .vimrc files are secure
set secure

" Define function to complete various startup tasks
function StartUp()
  " Load local .vimrc file
  if filereadable("./.vimrc")
    source .vimrc
  endif
endfunction
" Load local .vimrc file when starting vim
autocmd VimEnter * call StartUp()
